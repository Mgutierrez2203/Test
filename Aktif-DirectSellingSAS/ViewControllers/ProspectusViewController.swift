//
//  ProspectusViewController.swift
//  Aktif-DirectSellingSAS
//
//  Created by Mateo Gutiérrez Díaz on 22/11/17.
//  Copyright (c) 2017 Mateo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ProspectusViewControllerInput
{
    func displayProspectsList(prospects: [Prospectus])
    func displayError(error: String)
}

protocol ProspectusViewControllerOutput
{
    func getProspectsLists(token: String?)
}

class ProspectusViewController: UIViewController, ProspectusViewControllerInput
{
    // MARK: - Member variables
    var token: String!
    var prospects: [Prospectus]?
    var output: ProspectusViewControllerOutput!
    var router: ProspectusRouter!
    var base: BaseViewController!
    
    // MARK: IBOutlet
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - Object lifecycle
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ProspectusConfigurator.sharedInstance.configure(viewController: self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getProspectsListsOnLoad()
        tableView.tableFooterView = UIView(frame: .zero)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true);
        navigationController?.navigationBar.isHidden = true

    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Event handling
    func getProspectsListsOnLoad() {
        self.output.getProspectsLists(token: self.token)
    }
    
    // MARK: - Display logic
    func displayError(error: String) {
        print(error)
    }
    
    func displayProspectsList(prospects: [Prospectus]) {
        self.prospects = prospects
        self.tableView.reloadData()
    }
    

    /*
    func archiveList(list : [Prospectus]) -> NSData {
        
        return  NSKeyedArchiver.archivedData(withRootObject: list as Array) as NSData
    }
    
    func loadList(listKey: String) -> [Prospectus]? {
        
        if let unarchivedObject = UserDefaults.standard.object(forKey: listKey) as? Data {
            return NSKeyedUnarchiver.unarchiveObject(with: unarchivedObject as Data) as? [TipoLista]
        }
        return nil
    }
    
    private func saveList(list : [TipoLista]?, listKey: String) {
        let archivedObject = archiveList(list: list!)
        UserDefaults.standard.set(archivedObject, forKey: listKey)
        UserDefaults.standard.synchronize()
    */
   
    @IBAction func logoutButtom(_ sender: Any) {
        self.router.logout()
    }
}

extension ProspectusViewController:  UITableViewDataSource, UITableViewDelegate
{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let prospects = self.prospects {
            return prospects.count
        } else {
            return 0
        }
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "prospectusCell") as! ProspectusCell
        cell.prospectus = self.prospects?[indexPath.row]
        cell.router = self.router
        return cell
    }
  
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
}


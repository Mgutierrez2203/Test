//
//  LoginViewController.swift
//  Aktif-DirectSellingSAS
//
//  Created by Mateo Gutiérrez Díaz on 21/11/17.
//  Copyright (c) 2017 Mateo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SVProgressHUD

protocol LoginViewControllerInput
{
    func showMessage(_ message: String)
    func goToDashBoard(_ token : String?)}

protocol LoginViewControllerOutput
{
    func loginUser(user: User?)
}

class LoginViewController: UIViewController, UITextFieldDelegate, LoginViewControllerInput
{
    // MARK: - Member variables
    var user = User()
    var token : String?
    var output: LoginViewControllerOutput!
    var router: LoginRouter!
    
    // MARK: IBOutlet
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    
    // MARK: - Object lifecycle
    override func awakeFromNib()
    {
        super.awakeFromNib()
        LoginConfigurator.sharedInstance.configure(viewController: self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        emailTextField.delegate = self
        passwordTextField.delegate = self
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true);
        navigationController?.navigationBar.isHidden = true
        let email : String? = UserDefaults.standard.object(forKey: "email") as? String
        let password : String? = UserDefaults.standard.object(forKey: "password") as? String
        if  email != nil || password != nil {
            self.emailTextField.text = email
            self.passwordTextField.text = password
            self.validateUser( email, password: password)
        }
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    // MARK: UI Actions
    @IBAction func loginButton(_ sender: Any) {
        SVProgressHUD.show(withStatus: "Iniciando sesión")
        dismissKeyboard()
        validateUser(self.emailTextField.text!, password: self.passwordTextField.text!)
    }
    
    func validateUser(_ email:String!, password:String!) {
        if email.isEmpty || password.isEmpty {
            let alert = UIAlertController(title: "Alerta", message: "Campos vacíos", preferredStyle: UIAlertControllerStyle.alert)
            alert.addAction(UIAlertAction(title: "Aceptar", style: UIAlertActionStyle.default, handler: nil))
            self.present(alert, animated: true, completion: nil)
            SVProgressHUD.dismiss()
        }
        let emailValidFormat = isValidEmail(string: email)
        if emailValidFormat {
            user = User.init(email: email, password: password, token: nil)
            UserDefaults.standard.set(email, forKey: "email")
            UserDefaults.standard.set(password, forKey: "password")
            self.output.loginUser(user: user)
        } else {
            let alert = UIAlertController(title: "Alerta", message: "Email incorrecto", preferredStyle: UIAlertControllerStyle.alert)
            alert.addAction(UIAlertAction(title: "Aceptar", style: UIAlertActionStyle.default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
            SVProgressHUD.dismiss()
        }
    
    func isValidEmail(string: String) -> Bool {
        let emailReg = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
        let emailTest = NSPredicate(format:"SELF MATCHES %@", emailReg)
        return emailTest.evaluate(with: string)
    }
    
    func showMessage(_ message: String) {
        SVProgressHUD.dismiss()
        let alert = UIAlertController(title: "Alerta", message: message, preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction(title: "Aceptar", style: UIAlertActionStyle.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    func goToDashBoard(_ token : String?) {
        SVProgressHUD.dismiss()
        self.token = token!
        self.router.goToDashboard()
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case self.emailTextField:
            self.passwordTextField.becomeFirstResponder()
        default:
            self.view.endEditing(true)
            return true
        }
        return false
    }
    
    func dismissKeyboard() {
        view.endEditing(true)
    }
}
